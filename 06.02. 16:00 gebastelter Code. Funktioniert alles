# Install and load necessary libraries outside of the Shiny app script
packages <- c("shiny", "shinydashboard", "ggplot2", "corrplot", "reshape2", "plotly", "DT", "shinythemes", "shinyjs")
install_if_missing <- function(package) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package, dependencies = TRUE)
    if (!require(package, character.only = TRUE)) {
      stop("Package installation failed: ", package)
    }
  }
  library(package, character.only = TRUE)
}
lapply(packages, install_if_missing)

# Load libraries
library(shiny)
library(shinydashboard)
library(ggplot2)
library(corrplot)
library(reshape2)
library(plotly)
library(DT)
library(shinythemes)
library(shinyjs)

# Read dataset
StudentsPerformance_3 <- read.csv("https://raw.githubusercontent.com/SarahBauhofer/Dashboard/main/StudentsPerformance-3.csv")

# Data preprocessing
StudentsPerformance_3 <- StudentsPerformance_3[, !(names(StudentsPerformance_3) %in% c("lunch", "race.ethnicity"))]
passing_threshold <- 50
StudentsPerformance_3$math_pass_fail <- ifelse(StudentsPerformance_3$math.score >= passing_threshold, "Pass", "Fail")
StudentsPerformance_3$writing_pass_fail <- ifelse(StudentsPerformance_3$writing.score >= passing_threshold, "Pass", "Fail")
StudentsPerformance_3$reading_pass_fail <- ifelse(StudentsPerformance_3$reading.score >= passing_threshold, "Pass", "Fail")

avg_scores <- aggregate(cbind(math.score, reading.score, writing.score) ~ test.preparation.course, 
                        data = StudentsPerformance_3, FUN = function(x) round(mean(x, na.rm = TRUE), 2))
colnames(avg_scores) <- c("Test Preparation Course", "Math", "Reading", "Writing")
avg_scores_long <- reshape2::melt(avg_scores, id.vars = "Test Preparation Course", variable.name = "Subject", value.name = "Average Score")
# Define UI
ui <- fluidPage(
  titlePanel(title = "Test Preparation Course Evaluation Dashboard"),
  tags$head(
    tags$style(
      HTML("
      body { background-color: #77B6FC; /* Set the background color for the entire body */
      }
      .card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 15px;
        margin: 15px;
        transition: background-color 0.3s;
        text-align: left
      }
      
      .card:hover {
        background-color: #6EB6FC;
      }
      .selectize-input,
      .selectize-input.single,
      .selectize-control .selectize-dropdown .option {
        background-color: #ffffff; /* Set background color for the selectInput */
        color: #000000; /* Set font color for the selectInput */
        border: 1px solid #cccccc; /* Set border color for the selectInput */
        border-radius: 4px; /* Set border radius for the selectInput */
      }

      /* Hover effect for selectInput options */
      .selectize-dropdown-content .option:hover {
        background-color: #2980b9 !important; /* Darker blue on hover */
        color: #ffffff !important; /* White text on hover */
      }

      .section1 {
        background-color: #FFE9BF;
        color: #000000;
        text-align: center
      }

      .section2 {
        background-color: #C7E4FF;
        color: #000000;
      }

      .section3 {
        background-color: #FFC9C9;
        color: #000000;
      }

      .section4 {
        background-color: #E0E0E0;
        color: #000000;
      }
      ")
    )
  ),
  #Section 1: KPIS
  fluidRow(
    column(3, 
           div(class = "card section1",
               h4("ðŸ‘« Total Participants"),
               div(textOutput("total_participants_text"), style = "font-size: 24px;")  
           )
    ),
    column(3,
           div(class = "card section1",
               h4("ðŸ“Š Participation Rate"),
               div(textOutput("participant_rate_text"), style = "font-size: 24px;")
           )
    ),
    column(3,
           div(class = "card section1",
               h4("ðŸ“‰ Failure Rate"),
               div(textOutput("failure_rate_text"), style = "font-size: 24px;")
           )
    ),
    column(3,
           div(class = "card section1",
               h4("ðŸŽ“ Top 10% Pass Rate"),
               div(textOutput("top_10_pass_rate_text"), style = "font-size: 24px;")
           )
    )
  ),
  #Section 2: Bar Chart
  fluidRow(
    column(12,
           div(class = "card section2",
               h2("Failure Rate by Parental level of education"),
               selectInput("education_dropdown", "Select Parental level of education", 
                           choices = unique(StudentsPerformance_3$parental.level.of.education),
                           selected = NULL),
               fluidRow(
                 column(4,
                        plotlyOutput("bar_chart_test_prep_math")
                 ),
                 column(4,
                        plotlyOutput("bar_chart_test_prep_reading")
                 ),
                 column(4,
                        plotlyOutput("bar_chart_test_prep_writing")
                 )
               )
           )
    )
  ),
  #Section 3: Overview Table
  fluidRow(
    column(12,
           div(class = "card section3",
               h2("Average Scores"),
               dataTableOutput("average_scores_table"),
               selectInput("subject_dropdown", "Select Subject", 
                           choices = c("All", "Math", "Reading", "Writing"), 
                           selected = "All")
           )
    )
  ),
  #Section 4: Histogram 
  fluidRow(
    column(12,
           div(class = "card section4",
               h2("Overall Score vs. Participation Rate"),
               plotlyOutput("histogram")  
           )
    )
  )
)

# Define server logic
server <- function(input, output, session) {
  total_participants <- nrow(StudentsPerformance_3)
  
  # Inside server() function
  selected_subject <- reactive(input$subject_dropdown)
  
  StudentsPerformance_3$overall_score <- rowSums(StudentsPerformance_3[, c("math.score", "reading.score", "writing.score")])
  StudentsPerformance_3$pass_fail <- ifelse(StudentsPerformance_3$overall_score >= 150, "Pass", "Fail")
  
  
  
  # Initialize shinyjs
  shinyjs::useShinyjs()
  
  # Add custom CSS for fade-in effect
  shinyjs::inlineCSS("
    .fade-in {
      opacity: 0;
      transition: opacity 0.3s;
    }
    .fade-in.active {
      opacity: 1;
    }
  ")
  
  # Section 1: Key Performance Indicators (KPIs)
  output$total_participants_text <- renderText({
    paste(total_participants)
  })
  
  failure_rate <- function() {
    participants_failed <- sum(StudentsPerformance_3$pass_fail == "Fail")
    failure_rate_value <- participants_failed / total_participants * 100
    return(paste(round(failure_rate_value, 2), "%"))
  }
  
  top_10_pass_rate <- function() {
    top_10_percentage <- 10
    threshold_score <- quantile(StudentsPerformance_3$overall_score, 1 - (top_10_percentage / 100))
    top_10_passed <- sum(StudentsPerformance_3$overall_score >= threshold_score)
    top_10_pass_rate_value <- top_10_passed / total_participants * 100
    return(paste(round(top_10_pass_rate_value, 2), "%"))
  }
  
  output$participant_rate_text <- renderText({
    participants_completed <- sum(StudentsPerformance_3$test.preparation.course == "completed")
    participant_rate_value <- participants_completed / total_participants * 100
    paste(round(participant_rate_value, 2), "%")
  })
  
  output$failure_rate_text <- renderText({
    failure_rate()
  })
  
  output$top_10_pass_rate_text <- renderText({
    top_10_pass_rate()
  })
  
  # Section 2: Overview
  output$average_scores_table <- renderDT({
    if (input$subject_dropdown == "All") {
      datatable(avg_scores, 
                options = list(pageLength = 10, lengthMenu = c(10), lengthChange = FALSE, search = NULL, dom = 't'),
                rownames = FALSE,
                colnames = c("Test Preparation Course", "Math", "Reading", "Writing"))
    } else {
      filtered_avg_scores_long <- avg_scores_long[avg_scores_long$Subject == input$subject_dropdown, ]
      datatable(filtered_avg_scores_long, 
                options = list(pageLength = 10, lengthMenu = c(10), lengthChange = FALSE, search = NULL, dom = 't'),
                rownames = FALSE,
                colnames = c("Test Preparation Course", "Subject", "Average Score"))
    }
  })
  
  # Section 3: Test Preparation Bar Charts
  render_test_prep_bar_chart <- function(selected_subject, selected_education) {
    pass_fail_data <- table(StudentsPerformance_3$test.preparation.course,
                            StudentsPerformance_3[[paste0(tolower(selected_subject), "_pass_fail")]],
                            StudentsPerformance_3$parental.level.of.education)
    
    pass_fail_df <- as.data.frame(pass_fail_data)
    names(pass_fail_df) <- c("Test Preparation Course", "Pass/Fail", "Education Level", "Count")
    
    pass_fail_df <- pass_fail_df[pass_fail_df$`Education Level` == selected_education, ]
    pass_fail_df$Percentage <- ifelse(pass_fail_df$`Pass/Fail` == "Fail",
                                      (pass_fail_df$Count / sum(pass_fail_df$Count)) * 100, 0)
    
    difference <- pass_fail_df$Percentage[1] - pass_fail_df$Percentage[2]
    
    p <- ggplot(pass_fail_df, aes(x = `Test Preparation Course`, y = Percentage, fill = `Pass/Fail`, text = sprintf("%.2f", Percentage))) +
      geom_bar(stat = "identity", position = "dodge") +
      geom_segment(aes(x = 1, xend = 1.55, y = pass_fail_df$Percentage[1], yend = pass_fail_df$Percentage[2], text = NA),
                   arrow = arrow(type = "closed", angle = 20, length = unit(0.1, "inches")), color = "black", size = 0.5) +
      geom_text(aes(x = 1.275, y = mean(pass_fail_df$Percentage), label = sprintf("%.2f", difference)),
                color = "black", size = 4, vjust = 0.5, hjust = -0.5) +
      labs(title = paste(selected_subject, "-", selected_education),
           x = "Test Preparation Course", y = "Fail Rate (%)") +
      theme_minimal() +
      guides(fill = FALSE)
    
    ggplotly(p, tooltip = "text")
  }
  
  output$bar_chart_test_prep_math <- renderPlotly({
    if (selected_subject() %in% c("All", "Math")) {
      shinyjs::addClass(selector = "subject_dropdown", class = "fade-in")
      render_test_prep_bar_chart("Math", input$education_dropdown)
    }
  })
  
  output$bar_chart_test_prep_reading <- renderPlotly({
    if (selected_subject() %in% c("All", "Reading")) {
      shinyjs::addClass(selector = "subject_dropdown", class = "fade-in")
      render_test_prep_bar_chart("Reading", input$education_dropdown)
    }
  })
  
  output$bar_chart_test_prep_writing <- renderPlotly({
    if (selected_subject() %in% c("All", "Writing")) {
      shinyjs::addClass(selector = "subject_dropdown", class = "fade-in")
      render_test_prep_bar_chart("Writing", input$education_dropdown)
    }
  })
  
  # Section 4: Histogram (Overall Score)
  output$histogram <- renderPlotly({
    p <- plot_ly(StudentsPerformance_3, 
                 x = ~overall_score,
                 type = "histogram",
                 nbinsx = 30,  # Number of bins
                 color = ~test.preparation.course,
                 colors = c("blue", "purple")) %>%
      layout(
        xaxis = list(title = "Overall Score"),
        yaxis = list(title = "Number of Students"),
        showlegend = TRUE,
        legend = list(title = "Test Preparation Course", traceorder = "normal"))
    
    p
  })
  
}


# Run the application
shinyApp(ui, server)
