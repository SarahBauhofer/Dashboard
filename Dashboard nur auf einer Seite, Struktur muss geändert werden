install_if_missing <- function(package) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package, dependencies = TRUE)
    if (!require(package, character.only = TRUE)) {
      stop("Package installation failed: ", package)
    }
  }
  library(package, character.only = TRUE)
}

# Install and load necessary libraries
install_if_missing("shiny")
install_if_missing("shinydashboard")
install_if_missing("ggplot2")
install_if_missing("corrplot")
install_if_missing("reshape2")
install_if_missing("plotly")

library(shiny)
library(shinydashboard)
library(ggplot2)
library(corrplot)
library(reshape2)
library(plotly)

# Read your dataset
StudentsPerformance_3 <- read.csv("https://raw.githubusercontent.com/SarahBauhofer/Dashboard/main/StudentsPerformance-3.csv")

# Remove "lunch" and "race/ethnicity" columns
StudentsPerformance_3 <- StudentsPerformance_3[, !(names(StudentsPerformance_3) %in% c("lunch", "race.ethnicity"))]

# Define UI
ui <- fluidPage(
  titlePanel("Test Preparation Course Evaluation Dashboard"),
  
  # Section 1: Overview
  sidebarLayout(
    sidebarPanel(),
    mainPanel(
      h3("Overview"),
      verbatimTextOutput("summary"),
      plotOutput("completion_plot")
    )
  ),
  
  # Section 3: Detailed Scores
  sidebarLayout(
    sidebarPanel(
      selectInput("subject", "Select Subject", choices = c("Math", "Reading", "Writing")),
      checkboxInput("completed", "Show only completed courses", value = FALSE),
      selectInput("filter", "Filter", choices = c("All", "Pass", "Fail"), selected = "All")
    ),
    mainPanel(
      h3("Detailed Scores"),
      tableOutput("detailed_scores")
    )
  ),
  
  # Section 4: Fail Rate Analysis
  sidebarLayout(
    sidebarPanel(),
    mainPanel(
      h3("Fail Rate Analysis"),
      plotlyOutput("bar_chart_test_prep_math"),
      plotlyOutput("bar_chart_test_prep_reading"),
      plotlyOutput("bar_chart_test_prep_writing")
    )
  )
)

# Define server
server <- function(input, output) {
  # Section 1: Overview
  output$summary <- renderPrint({
    summary_data <- StudentsPerformance_3 %>%
      summarise(
        Avg_Math_Score = mean(math.score),
        Avg_Reading_Score = mean(reading.score),
        Avg_Writing_Score = mean(writing.score),
        Completion_Percentage = mean(test.preparation.course == "completed") * 100
      )
    summary_data
  })
  
  output$completion_plot <- renderPlot({
    ggplot(StudentsPerformance_3, aes(x = factor(test.preparation.course), fill = factor(test.preparation.course))) +
      geom_bar() +
      labs(title = "Test Preparation Course Completion Percentage",
           x = "Test Preparation Course",
           y = "Percentage") +
      scale_fill_manual(values = c("none" = "red", "completed" = "green"))
  })
  
  # Section 3: Detailed Scores
  output$detailed_scores <- DT::renderDataTable({
    subject_data <- switch(input$subject,
                           "Math" = StudentsPerformance_3$math.score,
                           "Reading" = StudentsPerformance_3$reading.score,
                           "Writing" = StudentsPerformance_3$writing.score)
    
    # Create a new column indicating Pass or Fail
    pass_fail <- ifelse(subject_data < 50, "Fail", "Pass")
    
    if (input$completed) {
      pass_fail <- pass_fail[StudentsPerformance_3$test.preparation.course == "completed"]
      subject_data <- subject_data[StudentsPerformance_3$test.preparation.course == "completed"]
    }
    
    # Filter based on user selection
    if (input$filter == "Pass") {
      indices <- which(pass_fail == "Pass")
      pass_fail <- pass_fail[indices]
      subject_data <- subject_data[indices]
    } else if (input$filter == "Fail") {
      indices <- which(pass_fail == "Fail")
      pass_fail <- pass_fail[indices]
      subject_data <- subject_data[indices]
    }
    
    data.frame(Student = seq_along(subject_data), Score = subject_data, Result = pass_fail) %>%
      DT::datatable(options = list(searching = FALSE, paging = TRUE, lengthChange = FALSE))
  })
  
  # Section 4: Fail Rate Analysis
  render_test_prep_bar_chart <- function(subject, selected_education) {
    pass_fail_data <- StudentsPerformance_3 %>%
      filter(!is.na(test.preparation.course)) %>%
      count(test.preparation.course, !!sym(paste0(tolower(subject), "_pass_fail")), parental.level.of.education) %>%
      spread(key = !!sym(paste0(tolower(subject), "_pass_fail")), value = n, fill = 0) %>%
      mutate(Percentage = Fail / (Pass + Fail) * 100) %>%
      filter(parental.level.of.education == selected_education)
    
    p <- ggplot(pass_fail_data, aes(x = test.preparation.course, y = Percentage, fill = factor(Fail > 0), text = sprintf("%.2f", Percentage))) +
      geom_bar(stat = "identity", position = "dodge") +
      geom_text(aes(label = sprintf("%.2f", Percentage)), position = position_dodge(width = 0.9), vjust = -0.5) +
      labs(title = paste(subject, "-", selected_education),
           x = "Test Preparation Course", y = "Fail Rate (%)") +
      theme_minimal() +
      guides(fill = FALSE)  # Remove the legend
    
    ggplotly(p, tooltip = "text")  # Convert ggplot to plotly with tooltip
  }
  
  
  output$bar_chart_test_prep_math <- renderPlotly({
    render_test_prep_bar_chart("Math", input$education_dropdown)
  })
  
  output$bar_chart_test_prep_reading <- renderPlotly({
    render_test_prep_bar_chart("Reading", input$education_dropdown)
  })
  
  output$bar_chart_test_prep_writing <- renderPlotly({
    render_test_prep_bar_chart("Writing", input$education_dropdown)
  })
}

# Run the application
shinyApp(ui, server)
