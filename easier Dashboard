#only the Students performance based on if they attended the preperation course or not. 
#the math score is replaced with a bar chart and gives the portion of passed students

install_if_missing <- function(package) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package, dependencies = TRUE)
    if (!require(package, character.only = TRUE)) {
      stop("Package installation failed: ", package)
    }
  }
  library(package, character.only = TRUE)
}

# Install and load necessary libraries
install_if_missing("shiny")
install_if_missing("shinydashboard")
install_if_missing("ggplot2")
install_if_missing("corrplot")
install_if_missing("reshape2")
install_if_missing("plotly")

library(shiny)
library(shinydashboard)
library(ggplot2)
library(corrplot)
library(reshape2)
library(plotly)

# Read your dataset
StudentsPerformance_3 <- read.csv("https://raw.githubusercontent.com/SarahBauhofer/Dashboard/main/StudentsPerformance-3.csv")

# Remove "lunch" and "race/ethnicity" columns
StudentsPerformance_3 <- StudentsPerformance_3[, !(names(StudentsPerformance_3) %in% c("lunch", "race.ethnicity"))]

# Convert 'parental.level.of.education' to a factor with a specific order
degree_order <- c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")
StudentsPerformance_3$parental.level.of.education <- factor(StudentsPerformance_3$parental.level.of.education, levels = degree_order, ordered = TRUE)

# Define UI
ui <- dashboardPage(
  dashboardHeader(title = "Students Performance Dashboard"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Dashboard", tabName = "dashboardTab")
    )
  ),
  dashboardBody(
    tabItems(
      tabItem(tabName = "dashboardTab",
              fluidRow(
                # Scatterplots
                column(4,
                       box(title = "Scatterplot - Math Score", width = 12, plotlyOutput("scatterplot_test_prep_math"))
                ),
                column(4,
                       box(title = "Scatterplot - Reading Score", width = 12, plotlyOutput("scatterplot_test_prep_reading"))
                ),
                column(4,
                       box(title = "Scatterplot - Writing Score", width = 12, plotlyOutput("scatterplot_test_prep_writing"))
                ),
                # Pass/Fail Rate Bar Chart based on Test Preparation Course
                column(6,
                       box(title = "Pass/Fail Rate", width = 12, plotlyOutput("pass_fail_rate"))
                )
              )
      )
    )
  )
)

# Define server logic
server <- function(input, output) {
  
  # Add Pass/Fail Status and Overall Score to the dataset
  StudentsPerformance_3$overall_score <- rowSums(StudentsPerformance_3[, c("math.score", "reading.score", "writing.score")])
  StudentsPerformance_3$pass_fail <- ifelse(StudentsPerformance_3$overall_score >= 150, "Pass", "Fail")
  
  output$groupedBoxplot <- renderPlotly({
    p <- ggplot(StudentsPerformance_3, aes(x = `parental.level.of.education`, y = math.score)) +
      geom_boxplot(aes(fill = "Math"), position = position_dodge(width = 0.8), width = 0.7) +
      geom_boxplot(aes(y = reading.score, fill = "Reading"), position = position_dodge(width = 0.8), width = 0.7) +
      geom_boxplot(aes(y = writing.score, fill = "Writing"), position = position_dodge(width = 0.8), width = 0.7) +
      labs(title = "Grouped Boxplot - Average Scores by Parental Level of Education",
           x = "Parental Level of Education", y = "Score") +
      theme_minimal() +
      scale_fill_manual(values = c("Math" = "skyblue", "Reading" = "lightgreen", "Writing" = "lightcoral"))
    
    ggplotly(p)
  })
  
  # Calculate average scores for filtered data
  avg_scores <- colMeans(StudentsPerformance_3[, c("math.score", "reading.score", "writing.score")])
  
  # Average Scores Bar Chart
  output$average_scores <- renderPlotly({
    bar_data <- data.frame(
      subject = rep(c("Math", "Reading", "Writing"), each = 2),
      gender = rep(c("Male", "Female"), times = 3),
      value = rep(avg_scores, times = 2)
    )
    
    p <- ggplot(bar_data, aes(x = subject, y = value, fill = gender)) +
      geom_bar(stat = "identity", position = "dodge") +
      labs(title = "Average Scores by Subject and Gender", x = "Subject", y = "Average Score") +
      theme_minimal()
    
    ggplotly(p)
  })
  
  # Test Preparation Scatterplots
  render_test_prep_scatterplot <- function(subject) {
    p <- ggplot(StudentsPerformance_3, aes(x = test.preparation.course, y = !!sym(subject), color = pass_fail)) +
      geom_point() +
      ggtitle(paste("Scatterplot - Test Preparation and", subject)) +
      theme_minimal() +
      labs(x = "Test Preparation Course", y = paste(subject), color = "Pass/Fail Status")
    
    ggplotly(p)
  }
  
  output$scatterplot_test_prep_math <- renderPlotly({
    render_test_prep_scatterplot("math.score")
  })
  
  output$scatterplot_test_prep_reading <- renderPlotly({
    render_test_prep_scatterplot("reading.score")
  })
  
  output$scatterplot_test_prep_writing <- renderPlotly({
    render_test_prep_scatterplot("writing.score")
  })
  
  # Pass/Fail Rate Bar Chart
  output$pass_fail_rate <- renderPlotly({
    pass_fail_data <- table(StudentsPerformance_3$test.preparation.course, StudentsPerformance_3$pass_fail)
    
    pass_fail_df <- as.data.frame(pass_fail_data)
    names(pass_fail_df) <- c("Test Preparation Course", "Pass/Fail", "Count")
    
    # Calculate percentages
    pass_fail_df$Percentage <- ifelse(pass_fail_df$`Pass/Fail` == "Fail", 
                                      (pass_fail_df$Count / sum(pass_fail_df$Count)) * 100, 0)
    
    p <- ggplot(pass_fail_df, aes(x = `Test Preparation Course`, y = Percentage, fill = `Pass/Fail`)) +
      geom_bar(stat = "identity", position = "dodge") +
      labs(title = "Percentage of Participants who Failed based on Test Preparation Course", 
           x = "Test Preparation Course", y = "Percentage") +
      theme_minimal() +
      scale_fill_manual(values = c("Pass" = "#4CAF50", "Fail" = "red"))  # Different shade of green
    
    ggplotly(p)  # Convert ggplot to plotly
  })
}

# Run the application
shinyApp(ui, server)
