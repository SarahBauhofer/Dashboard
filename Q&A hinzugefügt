# Install and load necessary libraries outside of the Shiny app script
packages <- c("shiny", "shinydashboard", "ggplot2", "corrplot", "reshape2", "plotly", "DT", "shinythemes", "shinyjs")
install_if_missing <- function(package) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package, dependencies = TRUE)
    if (!require(package, character.only = TRUE)) {
      stop("Package installation failed: ", package)
    }
  }
  library(package, character.only = TRUE)
}
lapply(packages, install_if_missing)

# Load libraries
library(shiny)
library(shinydashboard)
library(ggplot2)
library(corrplot)
library(reshape2)
library(plotly)
library(DT)
library(shinythemes)
library(shinyjs)

# Read dataset
StudentsPerformance_3 <- read.csv("https://raw.githubusercontent.com/SarahBauhofer/Dashboard/main/StudentsPerformance-3.csv")

# Data preprocessing
StudentsPerformance_3 <- StudentsPerformance_3[, !(names(StudentsPerformance_3) %in% c("lunch", "race.ethnicity"))]
passing_threshold <- 50
StudentsPerformance_3$math_pass_fail <- ifelse(StudentsPerformance_3$math.score >= passing_threshold, "Pass", "Fail")
StudentsPerformance_3$writing_pass_fail <- ifelse(StudentsPerformance_3$writing.score >= passing_threshold, "Pass", "Fail")
StudentsPerformance_3$reading_pass_fail <- ifelse(StudentsPerformance_3$reading.score >= passing_threshold, "Pass", "Fail")

avg_scores <- aggregate(cbind(math.score, reading.score, writing.score) ~ test.preparation.course, 
                        data = StudentsPerformance_3, FUN = function(x) round(mean(x, na.rm = TRUE), 2))
colnames(avg_scores) <- c("Test Preparation Course", "Math", "Reading", "Writing")
avg_scores_long <- reshape2::melt(avg_scores, id.vars = "Test Preparation Course", variable.name = "Subject", value.name = "Average Score")

# Define UI
ui <- fluidPage(
  shinyjs::useShinyjs(),
  theme = shinythemes::shinytheme("cerulean"),
  tags$style(HTML("
    body {
      font-size: 14px;
      font-family: 'Arial', sans-serif;
    }
    .kpi-card {
      background-color: #f5f5f5;
      border: 1px solid #ddd;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      padding: 15px;
      text-align: center;
      font-size: 18px;
      margin: 10px;
      width: 250px;
      display: inline-block;
    }
    .section-title {
      font-size: 24px;
      margin-bottom: 20px;
    }
  ")),
  
  titlePanel(title = "Test Preparation Course Evaluation Dashboard"),
  
  dashboardBody(
    style = "padding: 20px;",  # Adjust overall padding
    
    # Section 1: Key Performance Indicators (KPIs)
    fluidRow(
      div(
        class = "section-title",
        h2("Key Performance Indicators (KPIs)")
      ),
      div(
        style = "background-color: #F8F8F8; border: 2px solid #A9A9A9; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; text-align: center; font-size: 16px;",
        class = "kpi-card",
        h4("Total Participants"),
        textOutput("total_participants_text")
      ),
      div(
        style = "background-color: #F8F8F8; border: 2px solid #A9A9A9; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; text-align: center; font-size: 16px;",
        class = "kpi-card",
        h4("Participation Rate"),
        textOutput("participant_rate_text")
      ),
      div(
        style = "background-color: #F8F8F8; border: 2px solid #A9A9A9; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; text-align: center; font-size: 16px;",
        class = "kpi-card",
        h4("Failure Rate"),
        textOutput("failure_rate_text")
      ),
      div(
        style = "background-color: #F8F8F8; border: 2px solid #A9A9A9; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; text-align: center; font-size: 16px;",
        class = "kpi-card",
        h4("Top 10% Pass Rate"),
        textOutput("top_10_pass_rate_text")
      )
    ),
    
    # Section for Q&A
    div(
      style = "background-color: #383838; border: 1px solid #565656; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; text-align: center; font-size: 16px;",
      class = "qa-card",
      h4("AI-Powered Q&A"),
      textInput("user_query", "Ask a question:"),
      actionButton("submit_query", "Submit"),
      textOutput("qa_answer")
    ),
    
    # Section 2: Overview
    fluidRow(
      div(
        class = "section-title",
        h2("Overview")
      ),
      column(8,
             box(
               width = 8, 
               title = "Average Scores",
               dataTableOutput("average_scores_table"),
               selectInput("subject_dropdown", "Select Subject", 
                           choices = c("All", "Math", "Reading", "Writing"), 
                           selected = "All")
             )
      )
    ),
    
    # Section 3: Bar Chart Fail Rate
    fluidRow(
      div(
        class = "section-title",
        h2("Bar Chart Fail Rate")
      ),
      column(12,
             box(
               title = "Failure Rate by Parental level of education",
               selectInput("education_dropdown", "Select Parental level of education", 
                           choices = unique(StudentsPerformance_3$parental.level.of.education),
                           selected = NULL)
             )
      ),
      column(4,
             box(
               width = 10, 
               plotlyOutput("bar_chart_test_prep_math")
             )
      ),
      column(4,
             box(
               width = 10, 
               plotlyOutput("bar_chart_test_prep_reading")
             )
      ),
      column(4,
             box(
               width = 10, 
               plotlyOutput("bar_chart_test_prep_writing")
             )
      )
    )
  )
)

    
    # Section 3: Bar Chart Fail Rate
    fluidRow(
      div(
        class = "section-title",
        h2("Bar Chart Fail Rate")
      ),
      column(12,
             box(
               title = "Failure Rate by Parental level of education",
               selectInput("education_dropdown", "Select Parental level of education", 
                           choices = unique(StudentsPerformance_3$parental.level.of.education),
                           selected = NULL)
             )
      ),
      column(4,
             box(
               width = 10, 
               plotlyOutput("bar_chart_test_prep_math")
             )
      ),
      column(4,
             box(
               width = 10, 
               plotlyOutput("bar_chart_test_prep_reading")
             )
      ),
      column(4,
             box(
               width = 10, 
               plotlyOutput("bar_chart_test_prep_writing")
             )
      )
    )


    # Define server logic
    server <- function(input, output, session) {
      total_participants <- nrow(StudentsPerformance_3)
      
      # Inside server() function
      selected_subject <- reactive(input$subject_dropdown)
      
      StudentsPerformance_3$overall_score <- rowSums(StudentsPerformance_3[, c("math.score", "reading.score", "writing.score")])
      StudentsPerformance_3$pass_fail <- ifelse(StudentsPerformance_3$overall_score >= 150, "Pass", "Fail")
      
      # Initialize shinyjs
      shinyjs::useShinyjs()
      
      # Add custom CSS for fade-in effect
      shinyjs::inlineCSS("
    .fade-in {
      opacity: 0;
      transition: opacity 0.3s;
    }
    .fade-in.active {
      opacity: 1;
    }
  ")
      
      # Section 1: Key Performance Indicators (KPIs)
      output$total_participants_text <- renderText({
        paste(total_participants)
      })
      
      failure_rate <- function() {
        participants_failed <- sum(StudentsPerformance_3$pass_fail == "Fail")
        failure_rate_value <- participants_failed / total_participants * 100
        return(paste(round(failure_rate_value, 2), "%"))
      }
      
      top_10_pass_rate <- function() {
        top_10_percentage <- 10
        threshold_score <- quantile(StudentsPerformance_3$overall_score, 1 - (top_10_percentage / 100))
        top_10_passed <- sum(StudentsPerformance_3$overall_score >= threshold_score)
        top_10_pass_rate_value <- top_10_passed / total_participants * 100
        return(paste(round(top_10_pass_rate_value, 2), "%"))
      }
      
      output$participant_rate_text <- renderText({
        participants_completed <- sum(StudentsPerformance_3$test.preparation.course == "completed")
        participant_rate_value <- participants_completed / total_participants * 100
        paste(round(participant_rate_value, 2), "%")
      })
      
      output$failure_rate_text <- renderText({
        failure_rate()
      })
      
      output$top_10_pass_rate_text <- renderText({
        top_10_pass_rate()
      })
      
      # Q&A Section
      output$qa_answer <- renderText({
        # Add your AI-like logic here to generate answers based on user_query
        query <- input$user_query
        answer <- generate_answer(query)
        return(answer)
      })
      
      generate_answer <- function(query) {
        # Implement your AI-like answer generation logic here
        # You can use pre-trained models, APIs, or any other method to generate answers
        # For simplicity, you can have a set of predefined responses based on certain queries
        responses <- list(
          "What is the passing threshold?" = "The passing threshold is 50.",
          "How many participants completed the test preparation course?" = paste("There were", sum(StudentsPerformance_3$test.preparation.course == "completed"), "participants who completed the course.")
          # Add more responses as needed
        )
        
        return(responses[[query]] ?? "I'm sorry, I don't understand your question.")
      }
      
      output$data_qa <- renderText({
        paste("The dataset contains", nrow(StudentsPerformance_3), "records.")
        paste("The columns in the dataset are:", paste(names(StudentsPerformance_3), collapse = ", "))
        paste("The unique test preparation course levels are:", unique(StudentsPerformance_3$test.preparation.course))
        # Add more Q&A based on your requirements
      })
    }
    
  
  # Section 2: Overview
  output$average_scores_table <- renderDT({
    if (input$subject_dropdown == "All") {
      datatable(avg_scores, 
                options = list(pageLength = 10, lengthMenu = c(10), lengthChange = FALSE, search = NULL, dom = 't'),
                rownames = FALSE,
                colnames = c("Test Preparation Course", "Math", "Reading", "Writing"))
    } else {
      filtered_avg_scores_long <- avg_scores_long[avg_scores_long$Subject == input$subject_dropdown, ]
      datatable(filtered_avg_scores_long, 
                options = list(pageLength = 10, lengthMenu = c(10), lengthChange = FALSE, search = NULL, dom = 't'),
                rownames = FALSE,
                colnames = c("Test Preparation Course", "Subject", "Average Score"))
    }
  })
  
  # Section 3: Test Preparation Bar Charts
  render_test_prep_bar_chart <- function(selected_subject, selected_education) {
    pass_fail_data <- table(StudentsPerformance_3$test.preparation.course,
                            StudentsPerformance_3[[paste0(tolower(selected_subject), "_pass_fail")]],
                            StudentsPerformance_3$parental.level.of.education)
    
    pass_fail_df <- as.data.frame(pass_fail_data)
    names(pass_fail_df) <- c("Test Preparation Course", "Pass/Fail", "Education Level", "Count")
    
    pass_fail_df <- pass_fail_df[pass_fail_df$`Education Level` == selected_education, ]
    pass_fail_df$Percentage <- ifelse(pass_fail_df$`Pass/Fail` == "Fail",
                                      (pass_fail_df$Count / sum(pass_fail_df$Count)) * 100, 0)
    
    difference <- pass_fail_df$Percentage[1] - pass_fail_df$Percentage[2]
    
    p <- ggplot(pass_fail_df, aes(x = `Test Preparation Course`, y = Percentage, fill = `Pass/Fail`, text = sprintf("%.2f", Percentage))) +
      geom_bar(stat = "identity", position = "dodge") +
      geom_segment(aes(x = 1, xend = 1.55, y = pass_fail_df$Percentage[1], yend = pass_fail_df$Percentage[2], text = NA),
                   arrow = arrow(type = "closed", angle = 20, length = unit(0.1, "inches")), color = "black", size = 0.5) +
      geom_text(aes(x = 1.275, y = mean(pass_fail_df$Percentage), label = sprintf("%.2f", difference)),
                color = "black", size = 4, vjust = 0.5, hjust = -0.5) +
      labs(title = paste(selected_subject, "-", selected_education),
           x = "Test Preparation Course", y = "Fail Rate (%)") +
      theme_minimal() +
      guides(fill = FALSE)
    
    ggplotly(p, tooltip = "text")
  }
  
  output$bar_chart_test_prep_math <- renderPlotly({
    if (selected_subject() %in% c("All", "Math")) {
      shinyjs::addClass(selector = "#subject_dropdown", class = "fade-in")
      render_test_prep_bar_chart("Math", input$education_dropdown)
    }
  })
  
  output$bar_chart_test_prep_reading <- renderPlotly({
    if (selected_subject() %in% c("All", "Reading")) {
      shinyjs::addClass(selector = "#subject_dropdown", class = "fade-in")
      render_test_prep_bar_chart("Reading", input$education_dropdown)
    }
  })
  
  output$bar_chart_test_prep_writing <- renderPlotly({
    if (selected_subject() %in% c("All", "Writing")) {
      shinyjs::addClass(selector = "#subject_dropdown", class = "fade-in")
      render_test_prep_bar_chart("Writing", input$education_dropdown)
    }
  })

# Run the application
shinyApp(ui, server)
