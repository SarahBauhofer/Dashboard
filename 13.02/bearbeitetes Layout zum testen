# Install and load necessary libraries outside of the Shiny app script
packages <- c("shiny", "shinydashboard", "ggplot2", "corrplot", "reshape2", "plotly", "DT", "shinythemes", "shinyjs", "shinydashboardPlus")
install_if_missing <- function(package) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package, dependencies = TRUE)
    if (!require(package, character.only = TRUE)) {
      stop("Package installation failed: ", package)
    }
  }
  library(package, character.only = TRUE)
}
lapply(packages, install_if_missing)

# Load libraries
library(shiny)
library(shinydashboard)
library(ggplot2)
library(corrplot)
library(reshape2)
library(plotly)
library(DT)
library(shinythemes)
library(shinyjs)
library(shinydashboardPlus)



# Read dataset
StudentsPerformance_3 <- read.csv("https://raw.githubusercontent.com/SarahBauhofer/Dashboard/main/StudentsPerformance-3.csv")

# Data preprocessing
StudentsPerformance_3 <- StudentsPerformance_3[, !(names(StudentsPerformance_3) %in% c("lunch", "race.ethnicity"))]
passing_threshold <- 50
StudentsPerformance_3$math_pass_fail <- ifelse(StudentsPerformance_3$math.score >= passing_threshold, "Pass", "Fail")
StudentsPerformance_3$writing_pass_fail <- ifelse(StudentsPerformance_3$writing.score >= passing_threshold, "Pass", "Fail")
StudentsPerformance_3$reading_pass_fail <- ifelse(StudentsPerformance_3$reading.score >= passing_threshold, "Pass", "Fail")

avg_scores <- aggregate(cbind(math.score, reading.score, writing.score) ~ test.preparation.course, 
                        data = StudentsPerformance_3, FUN = function(x) round(mean(x, na.rm = TRUE), 2))
colnames(avg_scores) <- c("Test Preparation Course", "Math", "Reading", "Writing")
avg_scores_long <- reshape2::melt(avg_scores, id.vars = "Test Preparation Course", variable.name = "Subject", value.name = "Average Score")


# Define UI
ui <- shinyUI(
  dashboardPage(
    dashboardHeader(title = "Student Performance Dashboard"),
    dashboardSidebar(),
    dashboardBody(
    # UI content within the dashboardBody
    fluidRow(
      # Key Performance Indicators (KPIs)
      box(
        title = "Key Performance Indicators",
        status = "info",
        solidHeader = TRUE,
        collapsible = TRUE,
        width = 12,
        height = 150,
        tags$h4("Total Participants"),
        verbatimTextOutput("total_participants_text"),
        tags$h4("Participation Rate"),
        verbatimTextOutput("participant_rate_text"),
        tags$h4("Failure Rate"),
        verbatimTextOutput("failure_rate_text"),
        tags$h4("Top 10% Pass Rate"),
        verbatimTextOutput("top_10_pass_rate_text")
      )
    ),
    
    # Overview Table
    fluidRow(
      box(
        title = "Average Scores",
        status = "primary",
        solidHeader = TRUE,
        collapsible = TRUE,
        width = 12,
        height = 400,
        dataTableOutput("average_scores_table")
      )
    ),
    
    # Test Preparation Bar Charts
    fluidRow(
      box(
        title = "Test Preparation Bar Charts",
        status = "warning",
        solidHeader = TRUE,
        collapsible = TRUE,
        width = 4,
        height = 400,
        plotlyOutput("bar_chart_test_prep_math")
      ),
      box(
        title = "Test Preparation Bar Charts",
        status = "success",
        solidHeader = TRUE,
        collapsible = TRUE,
        width = 4,
        height = 400,
        plotlyOutput("bar_chart_test_prep_reading")
      ),
      box(
        title = "Test Preparation Bar Charts",
        status = "danger",
        solidHeader = TRUE,
        collapsible = TRUE,
        width = 4,
        height = 400,
        plotlyOutput("bar_chart_test_prep_writing")
      )
    ),
    
    # Scatter Plot (Overall Score vs Participation Rate)
    fluidRow(
      box(
        title = "Scatter Plot (Overall Score vs Participation Rate)",
        status = "info",
        solidHeader = TRUE,
        collapsible = TRUE,
        width = 12,
        height = 400,
        plotlyOutput("scatter_plot")
      )
    )
  )
)
)

# Define server logic (Assuming you have server logic)
server <- function(input, output, session) {

  # Generate color palette
  colors <- RColorBrewer::brewer.pal(3, "Set2")  # Generating a palette with 3 colors from "Set2" palette
  
  # Sample data for demonstration purposes
  set.seed(123)
  StudentsPerformance_3 <- data.frame(
    math.score = sample(50:100, 100, replace = TRUE),
    reading.score = sample(50:100, 100, replace = TRUE),
    writing.score = sample(50:100, 100, replace = TRUE),
    test.preparation.course = sample(c("completed", "none"), 100, replace = TRUE)
  )
  
  total_participants <- nrow(StudentsPerformance_3)
  output$total_participants_text <- renderText({ total_participants })
  output$participant_rate_text <- renderText({
    participants_completed <- sum(StudentsPerformance_3$test.preparation.course == "completed")
    participant_rate_value <- participants_completed / total_participants * 100
    paste(round(participant_rate_value, 2), "%")
  })
  output$failure_rate_text <- renderText({
    participants_failed <- sum(StudentsPerformance_3$overall_score < 150)
    failure_rate_value <- participants_failed / total_participants * 100
    paste(round(failure_rate_value, 2), "%")
  })
  output$top_10_pass_rate_text <- renderText({
    top_10_percentage <- 10
    threshold_score <- quantile(StudentsPerformance_3$overall_score, 1 - (top_10_percentage / 100))
    top_10_passed <- sum(StudentsPerformance_3$overall_score >= threshold_score)
    top_10_pass_rate_value <- top_10_passed / total_participants * 100
    paste(round(top_10_pass_rate_value, 2), "%")
  })
  
  # Sample data for the overview table
  avg_scores <- aggregate(cbind(math.score, reading.score, writing.score) ~ test.preparation.course, 
                          data = StudentsPerformance_3, FUN = function(x) round(mean(x, na.rm = TRUE), 2))
  colnames(avg_scores) <- c("Test Preparation Course", "Math", "Reading", "Writing")
  output$average_scores_table <- renderDataTable({
    datatable(avg_scores, 
              options = list(pageLength = 10, lengthMenu = c(10), lengthChange = FALSE, search = NULL, dom = 't'),
              rownames = FALSE,
              colnames = c("Test Preparation Course", "Math", "Reading", "Writing"))
  })
  
  # Sample data for the test preparation bar charts
  render_test_prep_bar_chart <- function(selected_subject) {
    pass_fail_data <- table(StudentsPerformance_3$test.preparation.course,
                            StudentsPerformance_3[[paste0(tolower(selected_subject), ".score")]])
    pass_fail_df <- as.data.frame(pass_fail_data)
    names(pass_fail_df) <- c("Test Preparation Course", "Pass/Fail", "Count")
    pass_fail_df$Percentage <- ifelse(pass_fail_df$`Pass/Fail` == "Fail",
                                      (pass_fail_df$Count / sum(pass_fail_df$Count)) * 100, 0)
    p <- plot_ly(data = pass_fail_df, x = ~`Test Preparation Course`, y = ~Percentage, color = ~`Pass/Fail`,
                 type = "bar", text = ~paste("Failures: ", Count, "<br>Fail Percentage: ", sprintf("%.2f", Percentage), "%")) %>%
      layout(title = paste("Test Preparation -", selected_subject),
             xaxis = list(title = "Test Preparation Course"),
             yaxis = list(title = "Fail Rate (%)"),
             barmode = "group")
    p
  }
  
  output$bar_chart_test_prep_math <- renderPlotly({
    render_test_prep_bar_chart("Math")
  })
  
  output$bar_chart_test_prep_reading <- renderPlotly({
    render_test_prep_bar_chart("Reading")
  })
  
  output$bar_chart_test_prep_writing <- renderPlotly({
    render_test_prep_bar_chart("Writing")
  })
  
  # Sample data for the scatter plot
  scatter_data <- data.frame(
    Overall_Score = StudentsPerformance_3$overall_score,
    Participation_Rate = (sum(StudentsPerformance_3$test.preparation.course == "completed") / total_participants) * 100
  )
  
  output$scatter_plot <- renderPlotly({
    p <- plot_ly(data = scatter_data, x = ~Overall_Score, y = ~Participation_Rate, type = "scatter", mode = "markers")
    p <- p %>% layout(title = "Overall Score vs Participation Rate",
                      xaxis = list(title = "Overall Score"),
                      yaxis = list(title = "Participation Rate"))
    p
  })
}

# Run the application
shinyApp(ui, server)
